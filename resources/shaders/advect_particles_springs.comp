#version 430
layout(local_size_x = 32, local_size_y = 1) in;

#include "../shader_includes/spring_types.in"

layout(std430, binding = BINDING_SYSTEM_CONFIG) buffer ConfigData {
    SpringSystemConfig config;
};

#include "../shader_includes/intersections.comp.in"


layout(std430, binding = BINDING_PARTICLES_IN) buffer ParticleDataIn
{
    Particle particles_in[];
};

layout(std430, binding = BINDING_PARTICLES_OUT) buffer ParticleDataOut
{
    Particle particles_out[];
};

layout(std430, binding = BINDING_FORCES) buffer Forces
{
    vec3 forces[];
};

layout(std430, binding = BINDING_SHAPE_SPHERE) buffer ShapeSphere {
    Sphere sphere;
    Sphere sphere_head;
};

layout(std430, binding = BINDING_FIXED_POINTS) buffer FixedParticles {
    Particle fixed_p[];
};

layout(std430, binding = BINDING_PARTICLE_TO_SEGMENTS_LIST) buffer P2S {
    Particle2SegmentsList part2segments[];
};

layout(std430, binding = BINDING_SEGMENTS_MAPPING_LIST) buffer SegmentsAdj {
    SegmentMapping segment_ptr[];
};

layout(location = 0) uniform float dt;
layout(location = 1) uniform uint intersect_sphere;
layout(location = 2) uniform uint intersect_sphere_head;
layout(location = 3) uniform vec4 base_rotation_quaternion;

vec3 qtransform( vec4 q, vec3 v ){ 
    return v + 2.0 * cross(cross(v, q.xyz ) + q.w * v, q.xyz);
}

void main() {
    const uint idx = gl_GlobalInvocationID.x;
    if(idx >= config.num_particles) {
        return;
    }

    if(idx < config.num_fixed_particles) {
        particles_out[idx].pos = qtransform(base_rotation_quaternion, fixed_p[idx].pos) + sphere_head.pos;
        return;
    }

    // get forces
    vec3 force = vec3(0.0);
    const Particle2SegmentsList p2s = part2segments[idx];
    for(uint i = 0; i < p2s.num_segments; ++i){
        SegmentMapping map = segment_ptr[i + p2s.segment_mapping_idx];
        vec3 f_tmp = forces[map.segment_idx];
        force += (map.invert_force == 0) ? f_tmp : -f_tmp;
    }

    // verlet solver
    const vec3 old_pos = particles_out[idx].pos;
    vec3 actual_pos = particles_in[idx].pos;
    vec3 new_pos = actual_pos 
        + config.k_v * (actual_pos - old_pos) 
        + dt * dt * (
            vec3(0.0,  -config.gravity, 0.0) 
            + force / config.particle_mass // forces to acceleration
            );
    
    // Colide against 5 walls
    // Bottom
    if(new_pos.y < 0.0) {
        const float delta_y = new_pos.y - actual_pos.y;
        //new_pos.y = new_pos.y - (1.0 + config.bounce) * new_pos.y;
        //actual_pos.y = new_pos.y - (delta_y - (1.0 + config.bounce) * delta_y);
        new_pos.y = - new_pos.y * config.bounce ;
        actual_pos.y = new_pos.y + delta_y * config.bounce;
    }
    // Back
    if(new_pos.z < 0.0) {
        const float delta_z = new_pos.z - actual_pos.z;
        new_pos.z = - new_pos.z * config.bounce ;
        actual_pos.z = new_pos.z + delta_z * config.bounce;
    }
    // Left
    if(new_pos.x < 0.0) {
        const float delta_x = new_pos.x - actual_pos.x;
        new_pos.x = - new_pos.x * config.bounce;
        actual_pos.x = new_pos.x + delta_x * config.bounce;
    }
    // Front
    if(new_pos.z > config.simulation_space_size) {
        const float delta_z = new_pos.z - actual_pos.z;
        new_pos.z = new_pos.z - (1.0 + config.bounce) * (new_pos.z - config.simulation_space_size);
        actual_pos.z = new_pos.z + delta_z * config.bounce;
    }
    // Right
    if(new_pos.x  > config.simulation_space_size) {
        const float delta_x = new_pos.x - actual_pos.x;
        new_pos.x = new_pos.x - (1.0 + config.bounce) * (new_pos.x - config.simulation_space_size);
        actual_pos.x = new_pos.x + delta_x * config.bounce;
    }

    // Sphere intersection
    if(intersect_sphere != 0) {
        intersect(sphere, actual_pos, new_pos);
    }
    if(intersect_sphere_head != 0) {
        intersect(sphere_head, actual_pos, new_pos);
    }

    particles_in[idx].pos = actual_pos;
    particles_out[idx].pos = new_pos;
    //particles_in[idx].pos.x = idx;
    //particles_out[idx].pos.x = idx;  
}

