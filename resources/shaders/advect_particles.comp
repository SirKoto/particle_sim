#version 430
layout(local_size_x = 32, local_size_y = 1) in;

#include "../shader_includes/particle_types.in"

layout(std430, binding = BINDING_SYSTEM_CONFIG) buffer ConfigData{
    ParticleSystemConfig config;
};

#include "../shader_includes/intersections.comp.in"


layout(std430, binding = BINDING_PARTICLES_IN) buffer ParticleDataIn
{
    Particle particles_in[];
};

layout(std430, binding = BINDING_PARTICLES_OUT) buffer ParticleDataOut
{
    Particle particles_out[];
};

layout(std430, binding = BINDING_ALIVE_LIST_IN) buffer ParticleIndicesAlive
{
    uint alive_particles_idx[];
};

layout(std430, binding = BINDING_ALIVE_LIST_OUT) buffer ParticleIndicesAliveNext
{
    uint alive_next_particles_idx[];
};

layout(std430, binding = BINDING_DEAD_LIST) buffer ParticleIndicesDead
{
    uint dead_particles_idx[];
};

layout(std430, binding = BINDING_SHAPE_SPHERE) buffer ShapeSphere {
    Sphere sphere;
};

layout(binding = BINDING_ATOMIC_ALIVE_IN, offset = 4) uniform atomic_uint num_particles_alive_in;
layout(binding = BINDING_ATOMIC_ALIVE_OUT, offset = 4) uniform atomic_uint num_particles_alive_out;
layout(binding = BINDING_ATOMIC_DEAD) uniform atomic_uint num_particles_dead;

layout(location = 0) uniform float dt;
layout(location = 1) uniform uint intersect_sphere;

void main() {
    const uint thread_id = gl_GlobalInvocationID.x;
    if(thread_id >= atomicCounter(num_particles_alive_in)) {
        return;
    }

    const uint idx = alive_particles_idx[thread_id];

    if(particles_in[idx].lifetime <= 0.0) {
        const uint dead_idx = atomicCounterIncrement(num_particles_dead);
        dead_particles_idx[dead_idx] = idx;
        return;
    }
    // verlet solver
    const vec3 old_pos = particles_out[idx].pos;
    vec3 actual_pos = particles_in[idx].pos;
    vec3 new_pos = actual_pos + config.k_v * (actual_pos - old_pos) - vec3(0.0, dt * dt * config.gravity, 0.0);
    
    // Colide against 5 walls
    // Bottom
    if(new_pos.y < 0.0) {
        const float delta_y = new_pos.y - actual_pos.y;
        //new_pos.y = new_pos.y - (1.0 + config.bounce) * new_pos.y;
        //actual_pos.y = new_pos.y - (delta_y - (1.0 + config.bounce) * delta_y);
        new_pos.y = - new_pos.y * config.bounce ;
        actual_pos.y = new_pos.y + delta_y * config.bounce;
    }
    // Back
    if(new_pos.z < 0.0) {
        const float delta_z = new_pos.z - actual_pos.z;
        new_pos.z = - new_pos.z * config.bounce ;
        actual_pos.z = new_pos.z + delta_z * config.bounce;
    }
    // Left
    if(new_pos.x < 0.0) {
        const float delta_x = new_pos.x - actual_pos.x;
        new_pos.x = - new_pos.x * config.bounce;
        actual_pos.x = new_pos.x + delta_x * config.bounce;
    }
    // Front
    if(new_pos.z > config.simulation_space_size) {
        const float delta_z = new_pos.z - actual_pos.z;
        new_pos.z = new_pos.z - (1.0 + config.bounce) * (new_pos.z - config.simulation_space_size);
        actual_pos.z = new_pos.z + delta_z * config.bounce;
    }
    // Right
    if(new_pos.x  > config.simulation_space_size) {
        const float delta_x = new_pos.x - actual_pos.x;
        new_pos.x = new_pos.x - (1.0 + config.bounce) * (new_pos.x - config.simulation_space_size);
        actual_pos.x = new_pos.x + delta_x * config.bounce;
    }

    // Sphere intersection
    if(intersect_sphere != 0) {
        intersect(sphere, actual_pos, new_pos);
    }

    particles_in[idx].pos = actual_pos;
    particles_out[idx].pos = new_pos;
    particles_out[idx].lifetime = particles_in[idx].lifetime - dt;
    //particles_in[idx].pos.x = idx;
    //particles_out[idx].pos.x = idx;


    // update alive
    alive_next_particles_idx[atomicCounterIncrement(num_particles_alive_out)] = idx;
    
}
